#version 430

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Embedding matrix: [vocab_size, model_dim]
layout(std430) restrict buffer EmbeddingBuffer {
    float embeddings[];
};
// Gradients: [batch_size, model_dim]
layout(std430) readonly buffer GradBuffer {
    float grads[];
};
// Token indices: [batch_size]
layout(std430) readonly buffer TokenIdxBuffer {
    int token_indices[];
};

uniform int batch_size;
uniform int vocab_size;
uniform int model_dim;
uniform float learning_rate;

void main() {
    uint token_pos = gl_GlobalInvocationID.x; // position in batch
    uint model_dim_idx = gl_GlobalInvocationID.y; // embedding dimension

    if (token_pos >= batch_size || model_dim_idx >= model_dim) {
        return;
    }

    int token_idx = token_indices[token_pos];
    if (token_idx < 0 || token_idx >= vocab_size) return;

    // Row-major: embedding[token_idx, model_dim_idx]
    embeddings[token_idx * model_dim + model_dim_idx] -= learning_rate * grads[token_pos * model_dim + model_dim_idx];
} 