#version 430

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

// Embedding matrix: [vocab_size, model_dim] (now column-major)
layout(std430) restrict buffer EmbeddingBuffer { float embeddings[]; };
// Gradients: [seq_len, model_dim]
layout(std430) readonly buffer GradBuffer { float grads[]; };
// Token indices:
layout(std430) readonly buffer TokenIdxBuffer { int token_indices[]; };

uniform int seq_len;
uniform int vocab_size;
uniform int model_dim;
uniform int out_idx;
uniform float learning_rate;

void main() {
    uint dim = gl_GlobalInvocationID.x;      // model_dim (column)
    if (dim >= model_dim || out_idx >= seq_len) return;

    int token_idx = token_indices[out_idx];
    if (token_idx < 0 || token_idx >= vocab_size) return;

    embeddings[dim * model_dim + token_idx] -= learning_rate * grads[dim * seq_len + out_idx];
    //embeddings[dim * model_dim + token_idx] = dim * seq_len + out_idx;

} 