#version 430
layout(local_size_x = 16) in;

layout(std430) readonly buffer Input { float input_scores[]; };     // [seq_len, seq_len]
layout(std430) writeonly buffer Output { float output_weights[]; }; // [seq_len, seq_len]

uniform int seq_len;
uniform int use_mask;

void main() {
    uint row = gl_GlobalInvocationID.x;
    if (row >= uint(seq_len)) return;
    
    // Find maximum for numerical stability
    float max_val = -3.402823e38;
    for (int j = 0; j < seq_len; j++) {
        if (use_mask == 1 && j > row) continue;
        float val = input_scores[row * seq_len + j];
        if (val > max_val) max_val = val;
    }
    
    // Compute sum of exponentials
    float sum_exp = 0.0;
    for (int j = 0; j < seq_len; j++) {
        if (use_mask == 1 && j > row) continue;
        float val = input_scores[row * seq_len + j];
        sum_exp += exp(val - max_val);
    }
    
    // Compute softmax
    for (int j = 0; j < seq_len; j++) {
        if (use_mask == 1 && j > row) {
            output_weights[row * seq_len + j] = 0.0;
        } else {
            float val = input_scores[row * seq_len + j];
            output_weights[row * seq_len + j] = exp(val - max_val) / sum_exp;
        }
    }
}