#version 430
layout(local_size_x = 16) in;

layout(std430) readonly buffer Input { float input_scores[]; };     // [num_heads * seq_len, seq_len]
layout(std430) writeonly buffer Output { float output_weights[]; }; // [num_heads * seq_len, seq_len]

uniform int seq_len;
uniform int num_heads;
uniform int use_mask;

// Padding mask: 1 for real tokens, 0 for PAD tokens
layout(std430) readonly buffer PaddingMask { int padding_mask[]; };

void main() {
    uint attention_row_idx = gl_GlobalInvocationID.x;  // attention row index (head * seq_len + query_pos)
    if (attention_row_idx >= uint(num_heads * seq_len)) return;
    
    // Extract head index and query position within the head
    uint head_idx = attention_row_idx / uint(seq_len);
    uint query_pos = attention_row_idx % uint(seq_len);
    
    // Find maximum for numerical stability (subtract max before exp to prevent overflow)
    float max_score = -3.402823e38;
    for (int key_pos = 0; key_pos < seq_len; key_pos++) {
        if (use_mask == 1 && key_pos > query_pos) continue;  // Apply causal mask
        if (padding_mask[key_pos] == 0) continue;  // Apply padding mask
        uint score_idx = attention_row_idx * seq_len + key_pos;
        float score_val = input_scores[score_idx];
        if (score_val > max_score) max_score = score_val;
    }
    
    // Compute sum of exponentials for normalization
    float sum_exp = 0.0;
    for (int key_pos = 0; key_pos < seq_len; key_pos++) {
        if (use_mask == 1 && key_pos > query_pos) continue;  // Apply causal mask
        if (padding_mask[key_pos] == 0) continue;  // Apply padding mask
        uint score_idx = attention_row_idx * seq_len + key_pos;
        float score_val = input_scores[score_idx];
        sum_exp += exp(score_val - max_score);
    }
    
    // Compute softmax attention weights
    for (int key_pos = 0; key_pos < seq_len; key_pos++) {
        uint weight_idx = attention_row_idx * seq_len + key_pos;
        if (use_mask == 1 && key_pos > query_pos) {
            output_weights[weight_idx] = 0.0;  // Zero out future positions in causal mask
        } else if (padding_mask[key_pos] == 0) {
            output_weights[weight_idx] = 0.0;  // Zero out PAD positions
        } else {
            uint score_idx = attention_row_idx * seq_len + key_pos;
            float score_val = input_scores[score_idx];
            output_weights[weight_idx] = exp(score_val - max_score) / sum_exp;
        }
    }
}