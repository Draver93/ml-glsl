#version 430
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430) readonly buffer GradOutput { float grad_out[]; };             // [num_heads * seq_len, head_dim]
layout(std430) readonly buffer CachedV { float cached_v[]; };                // [num_heads * seq_len, head_dim]
layout(std430) readonly buffer CachedAttentionWeights { float cached_attn[]; }; // [num_heads * seq_len, seq_len]

layout(std430) writeonly buffer GradAttentionWeights { float grad_attn[]; };  // [num_heads * seq_len, seq_len]
layout(std430) writeonly buffer GradV { float grad_v[]; };                   // [num_heads * seq_len, head_dim]

uniform int seq_len;
uniform int head_dim;
uniform int num_heads;

const float SAFE_MIN = -1e9;
const float SAFE_MAX = 1e9;

void main() {
    uint global_query = gl_GlobalInvocationID.x;  // 0..num_heads*seq_len-1
    uint key_pos = gl_GlobalInvocationID.y;       // 0..seq_len-1
    if (global_query >= uint(num_heads * seq_len) || key_pos >= uint(seq_len)) return;

    uint head = global_query / seq_len;
    uint query_pos = global_query % seq_len;

    // grad_attn: [num_heads * seq_len, seq_len]
    float grad_weight = 0.0;
    for (int head_dim_idx = 0; head_dim_idx < head_dim; head_dim_idx++) {
        uint grad_out_idx = (head * seq_len + query_pos) * head_dim + head_dim_idx;
        uint cached_v_idx = (head * seq_len + key_pos) * head_dim + head_dim_idx;
        grad_weight += grad_out[grad_out_idx] * cached_v[cached_v_idx];
    }
    uint grad_attn_idx = (head * seq_len + query_pos) * seq_len + key_pos;
    grad_attn[grad_attn_idx] = grad_weight;

    // grad_v: [num_heads * seq_len, head_dim]
    if (key_pos < uint(head_dim)) {
        float grad_val = 0.0;
        for (int k = 0; k < seq_len; k++) {
            uint cached_attn_idx = (head * seq_len + k) * seq_len + query_pos;
            uint grad_out_idx = (head * seq_len + k) * head_dim + key_pos;
            grad_val += cached_attn[cached_attn_idx] * grad_out[grad_out_idx];
        }
        uint grad_v_idx = (head * seq_len + query_pos) * head_dim + key_pos;
        grad_v[grad_v_idx] = grad_val;
    }
}