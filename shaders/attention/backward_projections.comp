#version 430
layout(local_size_x = 32) in;

layout(std430) readonly buffer GradScores { float grad_scores[]; };  // [num_heads * seq_len, seq_len]
layout(std430) readonly buffer CachedQ { float cached_q[]; };        // [num_heads * seq_len, head_dim]
layout(std430) readonly buffer CachedK { float cached_k[]; };        // [num_heads * seq_len, head_dim]

layout(std430) writeonly buffer GradQ { float grad_q[]; };           // [num_heads * seq_len, head_dim]
layout(std430) writeonly buffer GradK { float grad_k[]; };           // [num_heads * seq_len, head_dim]

uniform int seq_len;
uniform int head_dim;
uniform int num_heads;
uniform float inv_sqrt_head_dim;

void main() {
    uint global_idx = gl_GlobalInvocationID.x;
    if (global_idx >= uint(num_heads * seq_len * head_dim)) return;

    uint head = global_idx / (seq_len * head_dim);
    uint seq_pos = (global_idx / head_dim) % seq_len;
    uint head_dim_idx = global_idx % head_dim;

    // grad_q
    float grad_q_val = 0.0;
    for (int key_pos = 0; key_pos < seq_len; key_pos++) {
        uint grad_scores_idx = (head * seq_len + seq_pos) * seq_len + key_pos;
        uint cached_k_idx = (head * seq_len + key_pos) * head_dim + head_dim_idx;
        grad_q_val += grad_scores[grad_scores_idx] * cached_k[cached_k_idx];
    }
    uint grad_q_idx = (head * seq_len + seq_pos) * head_dim + head_dim_idx;
    grad_q[grad_q_idx] = grad_q_val * inv_sqrt_head_dim;

    // grad_k
    float grad_k_val = 0.0;
    for (int query_pos = 0; query_pos < seq_len; query_pos++) {
        uint grad_scores_idx = (head * seq_len + query_pos) * seq_len + seq_pos;
        uint cached_q_idx = (head * seq_len + query_pos) * head_dim + head_dim_idx;
        grad_k_val += grad_scores[grad_scores_idx] * cached_q[cached_q_idx];
    }
    uint grad_k_idx = (head * seq_len + seq_pos) * head_dim + head_dim_idx;
    grad_k[grad_k_idx] = grad_k_val * inv_sqrt_head_dim;
}