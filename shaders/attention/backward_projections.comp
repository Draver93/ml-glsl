#version 430
layout(local_size_x = 32) in;

layout(std430) readonly buffer GradScores { float grad_scores[]; };  // [seq_len, seq_len]
layout(std430) readonly buffer CachedQ { float cached_q[]; };        // [seq_len, head_dim]
layout(std430) readonly buffer CachedK { float cached_k[]; };        // [seq_len, head_dim]

layout(std430) writeonly buffer GradQ { float grad_q[]; };           // [seq_len, head_dim]
layout(std430) writeonly buffer GradK { float grad_k[]; };           // [seq_len, head_dim]

uniform int seq_len;
uniform int head_dim;
uniform float inv_sqrt_head_dim;

void main() {
    uint global_idx = gl_GlobalInvocationID.x;
    if (global_idx >= uint(seq_len * head_dim)) return;
    
    uint seq_pos = global_idx / uint(head_dim);  // sequence position (row index)
    uint head_dim_idx = global_idx % uint(head_dim);  // head dimension (column index)
    
    float grad_q_val = 0.0;
    for (int key_pos = 0; key_pos < seq_len; key_pos++) {
        uint grad_scores_idx = seq_pos * seq_len + key_pos;
        uint cached_k_col_major_idx = head_dim_idx * seq_len + key_pos;
        
        grad_q_val += grad_scores[grad_scores_idx] * cached_k[cached_k_col_major_idx];
    }
    uint grad_q_col_major_idx = head_dim_idx * seq_len + seq_pos;
    grad_q[grad_q_col_major_idx] = grad_q_val * inv_sqrt_head_dim;
    
    float grad_k_val = 0.0;
    for (int query_pos = 0; query_pos < seq_len; query_pos++) {
        uint grad_scores_idx = query_pos * seq_len + seq_pos;
        uint cached_q_col_major_idx = head_dim_idx * seq_len + query_pos;

        grad_k_val += grad_scores[grad_scores_idx] * cached_q[cached_q_col_major_idx];
    }
    uint grad_k_col_major_idx = head_dim_idx * seq_len + seq_pos;
    grad_k[grad_k_col_major_idx] = grad_k_val * inv_sqrt_head_dim;
}