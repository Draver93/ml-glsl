#version 430
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430) readonly buffer BufferQ { float Q[]; };         // [seq_len, head_dim]
layout(std430) readonly buffer BufferK { float K[]; };         // [seq_len, head_dim]
layout(std430) writeonly buffer RawScores { float scores[]; }; // [seq_len, seq_len]

uniform int seq_len;
uniform int head_dim;
uniform int use_mask;
uniform float inv_sqrt_head_dim;

void main() {
    uint i = gl_GlobalInvocationID.x;  // query position
    uint j = gl_GlobalInvocationID.y;  // key position
    
    if (i >= uint(seq_len) || j >= uint(seq_len)) return;
    
    // Apply causal mask if enabled
    if (use_mask == 1 && j > i) {
        scores[i * seq_len + j] = -3.402823e38;  // -infinity
        return;
    }
    
    // Compute dot product: Q[i] @ K[j]
    float score = 0.0;
    for (int d = 0; d < head_dim; d++) {
        score += Q[i * head_dim + d] * K[j * head_dim + d];
    }
    
    // Scale by 1/sqrt(head_dim)
    score *= inv_sqrt_head_dim;
    
    scores[i * seq_len + j] = score;
}