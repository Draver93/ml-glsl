#version 430

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(std430) readonly buffer GradOutput { float grad_output[]; }; // [seq_len, model_dim]
layout(std430) readonly buffer InputA { float input_a[]; };         // [seq_len, model_dim]
layout(std430) readonly buffer InputB { float input_b[]; };         // [seq_len, model_dim]
layout(std430) readonly buffer Gamma { float gamma[]; };            // [model_dim]
layout(std430) readonly buffer Beta { float beta[]; };              // [model_dim]

layout(std430) buffer GradInputA { float grad_input_a[]; }; // [seq_len, model_dim]
layout(std430) buffer GradInputB { float grad_input_b[]; }; // [seq_len, model_dim]
layout(std430) buffer GradGamma { float grad_gamma[]; };    // [model_dim * seq_len]
layout(std430) buffer GradBeta { float grad_beta[]; };      // [model_dim * seq_len]

uniform int seq_len;
uniform int model_dim;
uniform float epsilon;

void main() {
    uint seq_pos = gl_GlobalInvocationID.x; // sequence position (row index)
    if (seq_pos >= uint(seq_len)) return;

    // Compute mean
    float mean = 0.0;
    for (int dim = 0; dim < model_dim; dim++) {
        uint idx = dim * seq_len + seq_pos;
        mean += input_a[idx] + input_b[idx];
    }
    mean /= float(model_dim);

    // Compute variance
    float variance = 0.0;
    for (int dim = 0; dim < model_dim; dim++) {
        uint idx = dim * seq_len + seq_pos;
        float val = input_a[idx] + input_b[idx];
        float diff = val - mean;
        variance += diff * diff;
    }
    variance /= float(model_dim);
    float stddev = sqrt(variance + epsilon);

    // Precompute sums for LayerNorm backward
    float sum1 = 0.0;
    float sum2 = 0.0;
    for (int dim = 0; dim < model_dim; dim++) {
        uint idx = dim * seq_len + seq_pos;
        float val = input_a[idx] + input_b[idx];
        float dy = grad_output[idx];
        float g = gamma[dim];
        sum1 += dy * g;
        sum2 += dy * g * (val - mean);
    }

    // Compute gradients for each dimension at this sequence position
    for (int dim = 0; dim < model_dim; dim++) {
        uint idx = dim * seq_len + seq_pos;
        float val = input_a[idx] + input_b[idx];
        float norm = (val - mean) / stddev;
        float dy = grad_output[idx];
        float g = gamma[dim];

        // Write per-position gradients (row-major)
        grad_gamma[seq_pos * model_dim + dim] = dy * norm;
        grad_beta[seq_pos * model_dim + dim] = dy;

        // Full LayerNorm backward for input gradients
        float norm_gradient = dy * g;
        float val_gradient = (norm_gradient / stddev)
                           - (sum1 / (float(model_dim) * stddev))
                           - ((val - mean) * sum2 / (float(model_dim) * stddev * (variance + epsilon)));
        grad_input_a[idx] = val_gradient;
        grad_input_b[idx] = val_gradient;
    }
} 