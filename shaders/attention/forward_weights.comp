#version 430
layout(local_size_x = 32) in;

layout(std430) readonly buffer InputQ { float input_q[]; };     // [seq_len, input_dim]
layout(std430) readonly buffer InputKV { float input_kv[]; };   // [seq_len, input_dim]
layout(std430) readonly buffer WeightQ { float weight_q[]; };   // [input_dim, model_dim]
layout(std430) readonly buffer WeightK { float weight_k[]; };   // [input_dim, model_dim]
layout(std430) readonly buffer WeightV { float weight_v[]; };   // [input_dim, model_dim]

layout(std430) writeonly buffer OutputQ { float output_q[]; };  // [seq_len, model_dim]
layout(std430) writeonly buffer OutputK { float output_k[]; };  // [seq_len, model_dim]
layout(std430) writeonly buffer OutputV { float output_v[]; };  // [seq_len, model_dim]

uniform int seq_len;
uniform int input_dim;
uniform int head_dim;
uniform int num_heads;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= uint(seq_len * input_dim)) return;
    
    uint seq_idx = idx / uint(input_dim);
    uint dim_idx = idx % uint(input_dim);
    
    // Compute Q projection for all heads
    float q_val = 0.0;
    for (int i = 0; i < input_dim; i++) {
        q_val += input_q[seq_idx * input_dim + i] * weight_q[i * input_dim + dim_idx];
    }
    output_q[seq_idx * input_dim + dim_idx] = q_val;
    
    // Compute K projection for all heads
    float k_val = 0.0;
    for (int i = 0; i < input_dim; i++) {
        k_val += input_kv[seq_idx * input_dim + i] * weight_k[i * input_dim + dim_idx];
    }
    output_k[seq_idx * input_dim + dim_idx] = k_val;
    
    // Compute V projection for all heads
    float v_val = 0.0;
    for (int i = 0; i < input_dim; i++) {
        v_val += input_kv[seq_idx * input_dim + i] * weight_v[i * input_dim + dim_idx];
    }
    output_v[seq_idx * input_dim + dim_idx] = v_val;
}