#version 430
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430) readonly buffer GradProjection { float grad_projection[]; }; // [seq_len, head_dim]
layout(std430) readonly buffer Weight { float weight[]; };                  // [input_dim, head_dim]
layout(std430) buffer GradInput { float grad_input[]; };          // [seq_len, input_dim]

uniform int seq_len;
uniform int input_dim;
uniform int head_dim;
uniform int accumulate; // 0 = overwrite, 1 = add

void main() {
    uint seq_pos = gl_GlobalInvocationID.x;  // sequence position (row index)
    uint input_dim_idx = gl_GlobalInvocationID.y;  // input dimension (column index)
    
    if (seq_pos >= seq_len || input_dim_idx >= input_dim) return;
    
    // Compute gradient w.r.t. input: grad_input = grad_projection @ weight^T
    // Column-major indexing: grad_input[input_dim * seq_len + seq_pos]
    float sum = 0.0;
    for (uint head_dim_idx = 0; head_dim_idx < head_dim; head_dim_idx++) {
        // grad_projection indexing: [head_dimension * seq_len + sequence_position]
        uint grad_proj_col_major_idx = head_dim_idx * seq_len + seq_pos;
        // weight indexing: weight^T[head_dim_idx, input_dim_idx] = weight[input_dim_idx, head_dim_idx]
        uint weight_idx = input_dim_idx * head_dim + head_dim_idx;
        sum += grad_projection[grad_proj_col_major_idx] * weight[weight_idx];
    }
    
    // Store gradient with column-major indexing: [input_dimension * seq_len + sequence_position]
    uint grad_input_col_major_idx = input_dim_idx * seq_len + seq_pos;
    if (accumulate == 1) grad_input[grad_input_col_major_idx] += sum;
    else grad_input[grad_input_col_major_idx] = sum;
}