#version 430
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430) readonly buffer GradProjection { float grad_projection[]; }; // [model_dim, seq_len]
layout(std430) readonly buffer Weight { float weight[]; };                  // [model_dim, model_dim]
layout(std430) writeonly buffer GradInput { float grad_input[]; };          // [model_dim, seq_len]

uniform int seq_len;
uniform int input_dim;
uniform int head_dim;

void main() {
    uint seq_pos = gl_GlobalInvocationID.x;  // sequence position (row index)
    uint input_dim_idx = gl_GlobalInvocationID.y;  // input dimension (column index)
    
    if (seq_pos >= seq_len || input_dim_idx >= input_dim) return;
    
    // Compute gradient w.r.t. input: grad_input = grad_projection @ weight^T
    // Row-major indexing: grad_input[seq_pos * input_dim + input_dim_idx]
    float sum = 0.0;
    for (uint head_dim_idx = 0; head_dim_idx < head_dim; head_dim_idx++) {
        // grad_projection indexing: [seq_pos * model_dim + head_dim_idx]
        uint grad_proj_row_major_idx = seq_pos * (input_dim) + head_dim_idx;
        // weight indexing: weight^T[head_dim_idx, input_dim_idx] = weight[input_dim_idx, head_dim_idx]
        uint weight_idx = input_dim_idx * input_dim + head_dim_idx;
        sum += grad_projection[grad_proj_row_major_idx] * weight[weight_idx];
    }
    
    // Store gradient with row-major indexing: [seq_pos * input_dim + input_dim_idx]
    uint grad_input_row_major_idx = seq_pos * input_dim + input_dim_idx;
    grad_input[grad_input_row_major_idx] = sum;
}