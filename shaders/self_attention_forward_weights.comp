#version 430

layout(local_size_x = 32) in;

// Shared inputs
layout(std430) readonly buffer InputQ      { float input_q[]; };     // Q always from decoder input
layout(std430) readonly buffer InputKV     { float input_kv[]; };    // K,V from same source â€” either encoder or decoder

layout(std430) readonly buffer WeightQ     { float weights_q[]; };   // [input_dim * head_dim]
layout(std430) readonly buffer WeightK     { float weights_k[]; };
layout(std430) readonly buffer WeightV     { float weights_v[]; };

layout(std430) writeonly buffer OutputQ    { float output_q[]; };    // [seq_len * head_dim]
layout(std430) writeonly buffer OutputK    { float output_k[]; };
layout(std430) writeonly buffer OutputV    { float output_v[]; };

uniform int head_dim;
uniform int input_dim;
uniform int seq_len;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= seq_len * head_dim) return;

    uint seq_idx = idx / head_dim;
    uint head_idx = idx % head_dim;

    float q = 0.0;
    float k = 0.0;
    float v = 0.0;

    for (int i = 0; i < input_dim; i++) {
        float q_in = input_q[i * seq_len + seq_idx];
        float kv_in = input_kv[i * seq_len + seq_idx];

        q += q_in * weights_q[i * head_dim + head_idx];
        k += kv_in * weights_k[i * head_dim + head_idx];
        v += kv_in * weights_v[i * head_dim + head_idx];
    }

    output_q[idx] = q;
    output_k[idx] = k;
    output_v[idx] = v;
}