#version 430
#extension GL_ARB_shader_image_load_store : require
#extension GL_EXT_shader_image_atomic_float : require  // Only needed for float atomics if available

layout(local_size_x = 32) in;

layout(std430) readonly buffer GradOutput { float grad_output[]; };    // [seq_len * head_dim]
layout(std430) readonly buffer Input { float input[]; };              // [seq_len * input_dim]
layout(std430) readonly buffer Weight { float weight[]; };            // [input_dim * head_dim]

layout(std430) buffer GradInput { float grad_input[]; };              // [seq_len * input_dim]
layout(std430) buffer GradWeight { float grad_weight[]; };            // [input_dim * head_dim]

uniform int seq_len;
uniform int head_dim;
uniform int input_dim;



void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= seq_len * head_dim) return;

    uint seq_idx = idx / head_dim;
    uint head_idx = idx % head_dim;

    // Gradient w.r.t input: grad_input[seq_idx, i] += grad_output[seq_idx, head_idx] * weight[i, head_idx]
    for (int i = 0; i < input_dim; i++) {
        imageAtomicAdd(grad_input[seq_idx * input_dim + i],
                  grad_output[idx] * weight[i * head_dim + head_idx]);
    }

    // Gradient w.r.t weight: grad_weight[i, head_idx] += input[seq_idx, i] * grad_output[seq_idx, head_idx]
    for (int i = 0; i < input_dim; i++) {
        imageAtomicAdd(grad_weight[i * head_dim + head_idx],
                  input[seq_idx * input_dim + i] * grad_output[idx]);
    }
}