#version 430

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430) restrict readonly buffer NextDeltaBuffer { float next_deltas[]; };
layout(std430) restrict readonly buffer WeightBuffer { float weights[]; };
layout(std430) restrict writeonly buffer InputDeltaBuffer { float input_deltas[]; };

uniform int input_size;
uniform int output_size;
uniform int batch_size;

void main() {
    uint batch_idx = gl_GlobalInvocationID.x;  // batch sample index
    uint input_neuron_idx = gl_GlobalInvocationID.y;  // input neuron index

    if (batch_idx >= batch_size || input_neuron_idx >= input_size) return;

    // Compute gradient w.r.t. input: dL/dx = deltas @ weights^T
    float input_gradient = 0.0;
    for (int output_neuron_idx = 0; output_neuron_idx < output_size; output_neuron_idx++) {
        // Row-major indexing for batch processing
        uint delta_idx = batch_idx * output_size + output_neuron_idx;
        uint weight_idx = output_neuron_idx * input_size + input_neuron_idx;
        float delta_val = next_deltas[delta_idx];
        float weight_val = weights[weight_idx];
        
        // NaN check for debugging
        if (isnan(delta_val) || isnan(weight_val)) {
            input_gradient = 0.5; // Use a different debug value
            break;
        }
        input_gradient += delta_val * weight_val;
    }
    
    // Store input gradient with row-major indexing: [batch * input_size + input_neuron]
    uint input_delta_idx = batch_idx * input_size + input_neuron_idx;
    input_deltas[input_delta_idx] = input_gradient;
} 