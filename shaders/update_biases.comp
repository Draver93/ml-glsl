#version 430

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(std430) restrict readonly buffer DeltaBuffer { float deltas[]; };
layout(std430) restrict buffer BiasBuffer { float biases[]; };

uniform int output_size;
uniform int batch_size;
uniform float learning_rate;

void main() {
    uint output_neuron_idx = gl_GlobalInvocationID.x;  // output neuron index
    
    if (output_neuron_idx >= output_size) return;
    
    // Compute bias gradient: dL/db = sum(deltas) across batch
    float bias_gradient = 0.0;
    
    // Accumulate gradients across all batch samples
    for (int batch_idx = 0; batch_idx < batch_size; batch_idx++) {
        // Column-major indexing: [batch_idx * output_size + output_neuron_idx]
        uint delta_idx = batch_idx * output_size + output_neuron_idx;
        bias_gradient += deltas[delta_idx];
    }
    
    // Average gradient across batch and update bias
    bias_gradient /= float(batch_size);
    biases[output_neuron_idx] -= learning_rate * bias_gradient;
}