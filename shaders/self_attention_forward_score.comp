#version 430
layout(local_size_x = 16, local_size_y = 16) in;

layout(std430) readonly buffer BufferQ { float Q[]; };       // [head_dim * seq_len]
layout(std430) readonly buffer BufferK { float K[]; };       // [head_dim * seq_len]
layout(std430) readonly buffer BufferV { float V[]; };       // [head_dim * seq_len]

layout(std430) writeonly buffer BufferOutput { float output_buffer[]; };  // [head_dim * seq_len]

uniform int seq_len;
uniform int head_dim;
uniform int use_mask; // 1 = enable causal mask, 0 = disable
uniform float inv_sqrt_head_dim;

void main() {
    uint seq_idx = gl_GlobalInvocationID.x;   // query position (token index)
    uint dim_idx = gl_GlobalInvocationID.y;   // head dimension

    if (seq_idx >= uint(seq_len) || dim_idx >= uint(head_dim)) return;

    // 1) Find max score for softmax
    float max_score = -3.402823e38;
    for (int j = 0; j < seq_len; j++) {
        float score = 0.0;
        if (use_mask == 1 && j > seq_idx) score = -3.402823e38;
        else {
            for (int d = 0; d < head_dim; d++) {
                score += Q[d * seq_len + seq_idx] * K[d * seq_len + j];
            }
            score *= inv_sqrt_head_dim;
        }
        if (score > max_score) max_score = score;
    }

    // 2) Compute denominator (sum of exp)
    float denom = 0.0;
    for (int j = 0; j < seq_len; j++) {
        float score = 0.0;
        if (use_mask == 1 && j > seq_idx) score = -3.402823e38;
        else {
            for (int d = 0; d < head_dim; d++) {
                score += Q[d * seq_len + seq_idx] * K[d * seq_len + j];
            }
            score *= inv_sqrt_head_dim;
        }
        denom += exp(score - max_score);
    }

    // 3) Compute final output
    float attn_output = 0.0;
    for (int j = 0; j < seq_len; j++) {
        float score = 0.0;
        if (use_mask == 1 && j > seq_idx) score = -3.402823e38;
        else {
            for (int d = 0; d < head_dim; d++) {
                score += Q[d * seq_len + seq_idx] * K[d * seq_len + j];
            }
            score *= inv_sqrt_head_dim;
        }

        float weight = exp(score - max_score) / denom;
        attn_output += weight * V[dim_idx * seq_len + j];
    }

    output_buffer[dim_idx * seq_len + seq_idx] = attn_output;
}